def gitCommit() {
        sh "git rev-parse HEAD > GIT_COMMIT"
        def gitCommit = readFile('GIT_COMMIT').trim()
        sh "rm -f GIT_COMMIT"
        return gitCommit
    }

    node {
        // Checkout source code from Git
        stage 'Checkout'
        checkout scm

        dir ('.') {
        // Build Docker image
        stage 'Build'
        sh "docker build -t ${REGISTRYHOSTNAME}.marathon.l4lb.thisdcos.directory:5000/serve-model ."

        stage 'Test'
        sh "ls"


        // Push image to GitLab
        stage 'Publish'
        sh "docker push ${REGISTRYHOSTNAME}.marathon.l4lb.thisdcos.directory:5000/serve-model"
    }

    // Deploy
    stage 'Deploy'
      withCredentials(
          [[
              \$class: 'UsernamePasswordMultiBinding',
              credentialsId: 'kubernetes',
              usernameVariable: 'K8S_USERNAME',
              passwordVariable: 'K8S_PASSWORD'
          ]]
      ) {
        sh "if [ ! -f ./kubectl ]; then wget -q https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl; fi"
        sh "chmod +x ./kubectl"
        sh "./kubectl config set-credentials \${K8S_USERNAME} --token=\${K8S_PASSWORD}"
        sh "./kubectl config set-cluster dcos-k8s --server=https://apiserver.${K8SHOSTNAME}.l4lb.thisdcos.directory:6443 --insecure-skip-tls-verify"
        sh "./kubectl config set-context dcos-k8s --cluster=dcos-k8s --namespace=default --user=jenkins"
        sh "./kubectl config use-context dcos-k8s"
        sh "./kubectl get pods"
        sh "./kubectl apply --force -f serve-model.yaml"
      }
    }
